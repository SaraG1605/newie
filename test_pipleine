def label = "jenkins-request-${UUID.randomUUID().toString()}"
podTemplate(label: label, yaml: '''
apiVersion: "v1"
kind: "Pod"
spec:
  nodeSelector:
    node-role.kubernetes.io/jenkins2: ""
  tolerations:
  - effect: NoExecute
    key: vertical
    operator: Equal
    value: jenkins2
  hostAliases:
  - hostnames:
    - jira.example
    ip: 10.252.33.21
  - hostnames:
    - bitbucket.test
    ip: 10.251.33.24
''', containers: [
    containerTemplate(
      name: 'myimage',
      image: "${params.image}",
      ttyEnabled: true,
      command: 'cat',
      alwaysPullImage: true,
      envVars: [
                envVar(key: "MY_TOKEN", value: "${params.my_credentials}"),
                ]
      )
    ]) 
{
node(label) {
  container('myimage'){
    dir('eaas-onboarding-lib') {
        git branch: "${params.branch}", changelog: false, url:'https://github.com/SaraG1605/test_mig_jk/python_fake.git', credentialsId:'devsecops-bb'
    }

    try {
        stage ('Process Data'){
            currentStage = "${STAGE_NAME}"
            sh """
                cd test_mig_jk
                # python python_fake.py start
            """
        }

        stage ('Create BitBucket Project'){
            currentStage = "${STAGE_NAME}"
            sh """
                cd test_mig_jk
                # python python_fake.py middle
            """
     
        }

        stage ('Marking Task OK in Jira'){
            currentStage = "${STAGE_NAME}"
            sh """
                cd test_mig_jk
                # python python_fake.py finish -c 'finished successfully'
            """
        }
    }

    catch (e) {
        sh """
            cd cd test_mig_jk
            # python python_fake.py reject "Error at ${currentStage} stage : ${e.message}"
        """
        throw e
    }
  }
}
}
